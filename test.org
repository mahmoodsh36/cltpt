* my main header
properties here
:properties:
:id: hello
:end:


#+mykeyword: value
some [[mylink1-2:here1][testmore1- 2]] text
[[attachment:sliding.gif]]
[[attachment:sliding]]

comment here
#+begin_comment
this is a comment
#+end_comment
\#+begin_comment
this is a comment 2
\#+end_comment

some \*text*
text *

some \~text~
text ~

latex here
\[ x = \sqrt{x^2} \]

code here
#+begin_src python :results output
  import requests
  print('whatever')
  print('whatever2')
#+end_src

#+RESULTS:
: whatever
: whatever2
: \(11\)
: wow

#+begin_definition
hello definition.
#+end_definition

escaped macro here: \#(format nil "test~A" 1)

#(cltpt/base::make-block :type 'definition)
my first block
#(cltpt/base::block-end)

#(cltpt/base::make-block :type 'theorem :let '((a "some text")))
  my first block
  %a
  #(cltpt/base::make-block :type 'subtheorem
               :let* '((b " that will be included on export")))
    %(concatenate 'string a b)
  #(cltpt/base::block-end)
#(cltpt/base::block-end)

start with #20

add 1 to get %(+ (cltpt/base::prev-obj-eval) 1), add 10 to get %(+ (cltpt/base::prev-obj-eval) 10)

#(cltpt/base::blk :type 'theorem
        :let '((prev-num (prev))
               (next-num (parse-integer (car (text-list-items (next 'text-list)))))
               (new-num (+ prev-num next-num))))
then add the first number from the next list to get %new-num
multiply that by 5 to get %(* new-num 5). anything is possible! this is only a simple example
#(cltpt/base::/blk)

- 45 [[mylink]]
- 50
- 10

hi

- we have \(x=y\)
  a. nested item one
     more nested text
     1. test1
     2. test2
  b. nested item two
- item three

the /links/:

- org-mode link:                [[block1][next block]]
- link using our "text macros": #(ref :id "block1" :text "next block")
- markdown link:                ()[]

are equivalent, they point to the same object which is the next 'definition' block.

the specific functionality or syntax (like the org-mode link syntax above) can be enabled or
disabled as desired by the user. the parser is completely customizable and extensible,
we provide a default mode that parses /most/ of org-mode's syntax but it need not be used.
i personally plan on reducing my usage of org-mode syntax elements and use the "text-macro"
syntax above because it is a much more powerful alternative.

#(cltpt/base::b :type 'definition :name "block1" :let '((myvar1 ")my(-(test)")))
output: %(concatenate 'string "value: [[[" myvar1 "]]]").
#(cltpt/base::/b)

to transclude some block (possibly from another file ofcourse):
#(transclude :name "block1" :rebind '((myvar1 "somevaluehere")))

here is *some important text*, but also more *important text*.
also *more*. but more*

some ~inline code~ here.

some /italicized text/ here, and some ~code~ here.

tables
| code                             | math                  |
|----------------------------------+-----------------------|
| ~layer-x\9*1*0~                  | \(I^\ell\)            |
| ~layer-y~                        | \(\hat Y^\ell\)       |
| ~layer-y-unactivated~            | \(S^\ell\)            |
| ~s-deltas~                       | \(\Delta S^\ell\)     |
| ~x-deltas~                       | \(I^\ell\)            |
| ~activation-function~            | \(\phi\)              |
| ~activation-function-derivative~ | \(\phi'\)             |
| ~propped-deltas~                 | \(\Delta I^{\ell+1}\) |
| ~learning-rate~                  | \(\alpha\)            |


| head1 | head2 | head3 |
+------+-------+-------+
| foo | \(mymath\)   | baz  |
| 123 | 456          | 789  |
|     |              |      |
|     |              |      |
| end | row          | test |
