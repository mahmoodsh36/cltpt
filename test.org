:PROPERTIES:
:ID:       b94c1219-f8a3-44ac-b41b-81817e0c0f32
:END:
#+title: my doc
* TODO due task
SCHEDULED: <2024-10-29 Tue 16:41:04> DEADLINE: <2024-10-29 Tue 16:51:04>
<2025-07-25 Fri 10:00:00>
:PROPERTIES:
:ID: my-id
:LAST_REPEAT: [2024-10-29 Tue 16:40:36]
:END:
- State "DONE"       from "TODO"       [2024-10-29 Tue 16:41:04]
- State "CANCELED"   from "TODO"       [2024-10-29 Tue 16:40:36]
- State "MISSED"     from "TODO"       [2024-10-15 Tue 19:46:43]
- State "DONE"       from "TODO"       [2024-10-15 Tue 19:46:40]
- State "DONE"       from "TODO"       [2024-10-01 Tue 22:46:31]
- State "MISSED"     from "TODO"       [2024-09-24 Tue 23:12:42]
- State "DONE"       from "TODO"       [2024-09-24 Tue 23:12:34]
- State "DONE"       from "TODO"       [2024-09-10 Tue 15:14:29] \\
  done like an hour or so ago
- State "DONE"       from "TODO"       [2024-09-03 Tue 16:31:49]
- State "DONE"       from "TODO"       [2024-08-27 Tue 16:33:22]

#+begin_definition :defines standard thing :name def-ac-standard
an \(\compAC\) circuit is a /standard \(\compAC\) circuit/ iff:
1. the circuit is divided into layers, such that edges only connect vertices between subsequent layers.
2. in each layer there are only \(\textbooland\) or \(\textboolor\) gates (except the input layer).
3. in subsequent layers there are only different types of gates (e.g. an AND layer is followed by an OR layer, and vice versa).
we say the circuit is /very standard/ if the indegree of each gate in the first (non-input) layer is at most \(2\log(S)\), where \(S\) is the size of the circuit.
#+end_definition

#+begin_question
wow

#+begin_answer
what
#+end_answer

#+begin_src latex :file (cached-file "P9jJoKl.svg") :cache yes
  \begin{alg}
    \SetKwFunction{func}{\textsc{Relax}}
    \fn{\func{G,u,v}} {
      $time\_passed \gets d[u]$\;
      $actual\_weight \gets \textsc{Google-Updated-Weight}(time\_passed, (u,v))$\;
      \If {$d[v] > d[u] + actual\_weight$} {
        $d[v] \gets d[u] + actual\_weight$\;
        $p[v] \gets u$\;
      }
    }
  \end{alg}
#+end_src
hey
#+end_question

1. more text
2. more text2
3. more lists
interesting
here
test math

\[
\det\left[\begin{array}{cc}
a_2 & b_2 \\
a_3 & b_3
\end{array}\right] \\[2ex]
\det\left[\begin{array}{cc}
a_1 & b_1 \\
a_2 & b_2
\end{array}\right]
\end{array} \right] = \begin{bmatrix}
a_2 b_3 - a_3 b_2 \\
-a_1 b_3 + a_3 b_1 \\
a_1 b_2 - a_2 b_1
\end{bmatrix}. \]

* TODO another due task
SCHEDULED: <2024-10-15 Tue 16:41:04> DEADLINE: <2024-10-15 Tue 16:51:04>

* TODO my secondary header
SCHEDULED: <2025-07-26 Sat 10:55>

** TODO do something
SCHEDULED: <2025-07-27 Sun 10:55:00>

** TODO do something else
SCHEDULED: <2025-07-27 Sun 17:55:00>

** TODO send the professor a mail
DEADLINE: <2025-07-30 Wed 10:00>

hey latex: \(x\)

#+mykeyword: value
some [[mylink1-2:here1][testmore1- 2]] text
[[attachment:sliding.gif]]
[[attachment:sliding]]

comment here
#+begin_comment
this is a comment
#+end_comment
\#+begin_comment
this is a comment 2
\#+end_comment

some \*text*
text *

some \~text~
text ~

latex here
\[ x = \sqrt{x^2} \]

code here
#+begin_src python :results output
  import requests
  print('whatever')
  print('whatever2')
#+end_src

#+RESULTS:
: whatever
: whatever2
: \(11\)
: wow

#+begin_src python :results output
  do nothing
#+end_src

#+RESULTS[ca08ab2a6a58662675694033105ab0b331611fa2]:
[[file:~/brain/out/jyBtMrE.svg]]

\begin{dummy}
  this is a test
\end{dummy}

#+begin_definition :defines vector :name def-vector :exports none
hello definition.
#+end_definition

escaped macro here: \#(format nil "test~A" 1)

#(cltpt/base::make-block :type 'definition)
my first block
#(cltpt/base::block-end)

#(cltpt/base::make-block :type 'theorem :let '((a "some text")))
  my first block
  %a
  #(cltpt/base::make-block :type 'subtheorem
               :let* '((b " that will be included on export")))
    %(concatenate 'string a b)
  #(cltpt/base::block-end)
#(cltpt/base::block-end)

start with #20

add 1 to get %(+ (cltpt/base::prev-obj-eval) 1), add 10 to get %(+ (cltpt/base::prev-obj-eval) 10)

#(cltpt/base::blk :type 'theorem
        :let '((prev-num (prev))
               (next-num (parse-integer (car (text-list-items (next 'text-list)))))
               (new-num (+ prev-num next-num))))
then add the first number from the next list to get %new-num
multiply that by 5 to get %(* new-num 5). anything is possible! this is only a simple example
#(cltpt/base::/blk)

- 45 [[mylink]]
- 45 \(mathhh\)
- 50
- 10

hi

- we have \(x=y\)
  a. nested item one
     more nested text
     1. test1
     2. test2
  b. nested item two
- item three

the /links/:

- org-mode link:                [[block1][next block]]
- link using our "text macros": #(ref :id "block1" :text "next block")
- markdown link:                ()[]

are equivalent, they point to the same object which is the next 'definition' block.

the specific functionality or syntax (like the org-mode link syntax above) can be enabled or
disabled as desired by the user. the parser is completely customizable and extensible,
we provide a default mode that parses /most/ of org-mode's syntax but it need not be used.
i personally plan on reducing my usage of org-mode syntax elements and use the "text-macro"
syntax above because it is a much more powerful alternative.

#(cltpt/base::b :type 'definition :name "block1" :let '((myvar1 ")my(-(test)")))
output: %(concatenate 'string "value: [[[" myvar1 "]]]").
#(cltpt/base::/b)

to transclude some block (possibly from another file ofcourse):
#(transclude :name "block1" :rebind '((myvar1 "somevaluehere")))

here is *some important text*, but also more *important text*.
also *more*. but more*

some ~inline code~ here.

some /italicized text/ here, and some ~code~ here.

tables
| code                             | math                  |
|----------------------------------+-----------------------|
| ~layer-x\9*1*0~                  | \(I^\ell\)            |
| ~layer-y~                        | \(\hat Y^\ell\)       |
| ~layer-y-unactivated~            | \(S^\ell\)            |
| ~s-deltas~                       | \(\Delta S^\ell\)     |
| ~x-deltas~                       | \(I^\ell\)            |
| ~activation-function~            | \(\phi\)              |
| ~activation-function-derivative~ | \(\phi'\)             |
| ~propped-deltas~                 | \(\Delta I^{\ell+1}\) |
| ~learning-rate~                  | \(\alpha\)            |


| head1 | head2 | head3 |
|-------+-------+-------|
| foo   |       | baz   |
| 123   | 456   | 789   |
|       |       |       |
|       |       |       |
| end   | row   | test  |


\( more math \)
